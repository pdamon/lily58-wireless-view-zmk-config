/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hrm_right: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 37 38 39 40 41>;
            flavor = "balanced";
            require-prior-idle-ms = <400>;
            hold-trigger-on-release;
            quick-tap-ms = <200>;
        };

        hrm_left: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 35 44 45 46 47 48 11 23>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <400>;
            quick-tap-ms = <200>;
        };

        hrm_rshift: hrm_rshift {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RSHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 25 26 27 28 29 37 38 39 40 41>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        hrm_lshift: hrm_lshift {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LSHIFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 30 31 32 33 34 35 44 45 46 47 48 23 11>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <41 44>;
            layers = <0>;
            require-prior-idle-ms = <250>;
        };

        Escape {
            bindings = <&kp ESC>;
            key-positions = <28 27>;
            layers = <0>;
        };

        Tab {
            bindings = <&kp TAB>;
            key-positions = <31 32>;
            layers = <0>;
        };

        lock_screen {
            bindings = <&lock_screen>;
            key-positions = <1 0>;
            require-prior-idle-ms = <250>;
            layers = <0>;
        };
    };

    macros {
        ctrlpause: ctrlpause {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(PAUSE_BREAK)>;
            label = "CTRLPAUSE";
        };

        lock_screen: lock_screen {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(L)>;
            label = "LOCK_SCREEN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            label = "Base";
            bindings = <
&kp ESC    &kp N1               &kp N2             &kp N3            &kp N4            &kp N5                         &kp N6  &kp N7             &kp N8             &kp N9              &kp N0                  &kp GRAVE
&kp TAB    &kp Q                &kp W              &kp E             &kp R             &kp T                          &kp Y   &kp U              &kp I              &kp O               &kp P                   &kp BACKSLASH
&kp LCTRL  &hrm_lshift LSHFT A  &hrm_left LCTRL S  &hrm_left LALT D  &hrm_left LGUI F  &kp G                          &kp H   &hrm_right RGUI J  &hrm_right RALT K  &hrm_right RCTRL L  &hrm_rshift RSHFT SEMI  &kp SQT
&kp LSHFT  &kp Z                &kp X              &kp C             &kp V             &kp B   &kp LPAR    &kp RPAR   &kp N   &kp M              &kp COMMA          &kp DOT             &kp FSLH                &kp RSHFT
                                                   &kp LGUI          &kp BSPC          &mo 1   &kp RET     &kp SPACE  &mo 2   &kp DEL            &kp LEFT_ALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Lower {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            label = "Lower";
            bindings = <
&kp C_MUTE  &kp C_PREV               &kp C_PP               &kp C_NEXT            &kp C_VOL_DN          &kp C_VOL_UP                          &trans         &trans                 &trans                 &trans                  &trans                   &trans
&trans      &kp RS(EXCL)             &kp RS(AT)             &kp RS(HASH)          &kp RS(DLLR)          &kp RS(PRCNT)                         &kp RS(CARET)  &kp RS(AMPS)           &kp RS(STAR)           &trans                  &trans                   &trans
&trans      &hrm_lshift LSHFT KP_N1  &hrm_left LCTRL KP_N2  &hrm_left LALT KP_N3  &hrm_left LGUI KP_N4  &kp KP_N5                             &kp KP_N6      &hrm_right RGUI KP_N7  &hrm_right RALT KP_N8  &hrm_right RCTRL KP_N9  &hrm_rshift RSHFT KP_N0  &trans
&trans      &trans                   &trans                 &kp RS(TILDE)         &kp EQUAL             &kp EQUAL      &kp LBKT    &kp RBKT   &kp RS(PLUS)   &kp MINUS              &kp COMMA              &kp DOT                 &kp FSLH                 &trans
                                                            &trans                &trans                &trans         &trans      &kp SPACE  &trans         &trans                 &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Raise {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            label = "Raise";
            bindings = <
&kp F1    &kp F2                       &kp F3                 &kp F4               &kp F5                   &kp F6                               &kp F7        &kp F8         &kp F9        &kp F10       &kp F11  &kp F12
&trans    &trans                       &trans                 &trans               &trans                   &kp LBKT                             &kp RBKT      &kp RS(CARET)  &kp UP_ARROW  &kp RS(DLLR)  &trans   &ctrlpause
&kp CAPS  &hrm_lshift LSHFT RS(UNDER)  &hrm_left LCTRL GRAVE  &hrm_left LALT BSLH  &hrm_left LGUI RS(PIPE)  &kp RS(LPAR)                         &kp RS(RPAR)  &kp LEFT       &kp DOWN      &kp RIGHT     &trans   &kp INS
&trans    &trans                       &trans                 &trans               &trans                   &kp RS(LBRC)  &kp LBRC     &kp RBRC  &kp RS(RBRC)  &trans         &trans        &trans        &trans   &trans
                                                              &trans               &trans                   &trans        &kp SPACE    &trans    &trans        &trans         &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        Both {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
